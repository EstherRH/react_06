{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/Components/Props.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Props = props => {\n  /*   En este punto se puede colocar código estándar de javaScript   */\n  // a)\n  // Componente Hello. Primera forma\n  // se utiliza el parámetro u objeto props, con la propiedad title\n  // se utlizan las llaves\n  const Hello = props => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }; // b)\n  // Componente Yass. Segunda forma\n  // Se utiliza el método Render: se devuelve el elemento que queremos renderizar\n\n\n  class Yasss extends Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 20\n      }, this);\n    }\n\n  } // c)\n  // Componente Text. Con sintaxis de clases:\n\n\n  class Text extends Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 20\n      }, this);\n    }\n\n  } // d)\n  // Componente Número. Con sintaxis de clases:\n  // el elemento render solo puede devolver un elemento\n  // Componente Booleano tmb:\n\n\n  class Number extends Component {\n    render() {\n      const textoSegunBool = this.props.boolean ? 'Cierto' : 'Falso';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: textoSegunBool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    }\n\n  } //Boolean\n\n\n  class Boolean extends Component {\n    render() {\n      const textoBooleans = this.props.isActivated ? 'On!' : 'Off';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: textoBooleans\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    }\n\n  } // // Números\n  // class Numbers extends Component {\n  //     render () {\n  //\n  //         // se le pasa una función para multiplicar cada elemento por 2\n  //         const mappedNumber = this.props.arrayOfNumber.map(n => n * 2)\n  //         // otra forma de multiplicar: multiply1\n  //         const mappedNumber1 = this.props.arrayOfNumber.map(this.props.multiply1)\n  //\n  //         return (\n  //             <div>\n  //                 {/*Se hace un join en el array de números, y le decimos que lo divida con una coma y un espacio*/}\n  //                 <p>{this.props.arrayOfNumber.join(', ')}</p>\n  //                 <p>{mappedNumber.join(', ')}</p>\n  //                 <p>{mappedNumber1.join(', ')}</p>\n  //                 <p>{this.props.objectWithInfo.key}</p>\n  //             </div>\n  //\n  //         )\n  //     }\n  // }\n  //Números (como la anterior pero más simplificada) Destructuración:\n\n\n  class Numbers extends Component {\n    render() {\n      // Destructuración del objeto. todo ordenado en una constante:\n      // Así se accede a todas las props que necesitamos en nuestro componente\n      const {\n        arrayOfNumber,\n        multiply1,\n        objectWithInfo,\n        title\n      } = this.props; // en las dos siguientes funciones se elimina: \"this.props\"\n      // se le pasa una función para multiplicar cada elemento por 2\n\n      const mappedNumber = arrayOfNumber.map(n => n * 2); // otra forma de multiplicar: multiply1\n\n      const mappedNumber1 = arrayOfNumber.map(multiply1);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.arrayOfNumber.join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: mappedNumber.join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: mappedNumber1.join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: objectWithInfo.key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n  /*   Todo lo que está dentro del return es lo que se va a mostrar   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: [/*#__PURE__*/_jsxDEV(Hello, {\n      title: \"Podemos repetirlo varias veces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Hello, {\n      title: \"Hello from props\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Yasss, {\n      title: \"Hello from yass\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      text: \"texto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Boolean, {\n      text: \"prueba con booleanos\",\n      isActivated: false // si a \"isActivated\" no se le pasa ningún valor, da por hecho que es true, en nuesto caso: \"on!\"\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Number, {\n      number: 2,\n      text: \"Esto es un n\\xFAmero\",\n      boolean: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Numbers, {\n      arrayOfNumber: [2, 3, 10],\n      multiply1: number => number * 4,\n      objectWithInfo: {\n        key: 'First Value',\n        key2: 'otherValue'\n      },\n      text: \"N\\xFAmeros\",\n      title: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Este es el t\\xEDtulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 8\n  }, this);\n};\n\n_c = Props;\nexport default Props;\n\nvar _c;\n\n$RefreshReg$(_c, \"Props\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/Components/Props.js"],"names":["React","Component","Props","props","Hello","title","Yasss","render","Text","text","Number","textoSegunBool","boolean","number","Boolean","textoBooleans","isActivated","Numbers","arrayOfNumber","multiply1","objectWithInfo","mappedNumber","map","n","mappedNumber1","join","key","key2"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nconst Props = (props) => {\n\n    /*   En este punto se puede colocar código estándar de javaScript   */\n\n\n\n    // a)\n    // Componente Hello. Primera forma\n    // se utiliza el parámetro u objeto props, con la propiedad title\n    // se utlizan las llaves\n    const Hello = (props) => {\n        return <p>{props.title}</p>\n    }\n\n    // b)\n    // Componente Yass. Segunda forma\n    // Se utiliza el método Render: se devuelve el elemento que queremos renderizar\n    class Yasss extends Component{\n        render () {\n            return <h2>{this.props.title}</h2>\n        }\n    }\n\n    // c)\n    // Componente Text. Con sintaxis de clases:\n    class Text extends Component {\n        render () {\n            return <p>{this.props.text}</p>\n        }\n\n    }\n\n    // d)\n    // Componente Número. Con sintaxis de clases:\n    // el elemento render solo puede devolver un elemento\n    // Componente Booleano tmb:\n    class Number extends Component {\n        render () {\n            const textoSegunBool = this.props.boolean ? 'Cierto' : 'Falso'\n            return(\n                <div>\n                    <p>{this.props.text}</p>\n                    <p>{this.props.number}</p>\n                    <p>{textoSegunBool}</p>\n                </div>\n            )\n        }\n\n    }\n\n\n\n\n    //Boolean\n    class Boolean extends Component {\n        render () {\n            const textoBooleans = this.props.isActivated ? 'On!' : 'Off'\n\n            return (\n                <div>\n                    <p>{textoBooleans}</p>\n                </div>\n            )\n        }\n    }\n\n    // // Números\n    // class Numbers extends Component {\n    //     render () {\n    //\n    //         // se le pasa una función para multiplicar cada elemento por 2\n    //         const mappedNumber = this.props.arrayOfNumber.map(n => n * 2)\n    //         // otra forma de multiplicar: multiply1\n    //         const mappedNumber1 = this.props.arrayOfNumber.map(this.props.multiply1)\n    //\n    //         return (\n    //             <div>\n    //                 {/*Se hace un join en el array de números, y le decimos que lo divida con una coma y un espacio*/}\n    //                 <p>{this.props.arrayOfNumber.join(', ')}</p>\n    //                 <p>{mappedNumber.join(', ')}</p>\n    //                 <p>{mappedNumber1.join(', ')}</p>\n    //                 <p>{this.props.objectWithInfo.key}</p>\n    //             </div>\n    //\n    //         )\n    //     }\n    // }\n\n    //Números (como la anterior pero más simplificada) Destructuración:\n    class Numbers extends Component {\n        render () {\n            // Destructuración del objeto. todo ordenado en una constante:\n            // Así se accede a todas las props que necesitamos en nuestro componente\n            const {\n                arrayOfNumber,\n                multiply1,\n                objectWithInfo,\n                title\n            } = this.props\n\n            // en las dos siguientes funciones se elimina: \"this.props\"\n            // se le pasa una función para multiplicar cada elemento por 2\n            const mappedNumber = arrayOfNumber.map(n => n * 2)\n            // otra forma de multiplicar: multiply1\n            const mappedNumber1 = arrayOfNumber.map(multiply1)\n\n            return (\n                <div>\n                    {/*Se hace un join en el array de números, y le decimos que lo divida con una coma y un espacio*/}\n                    <p>{this.props.arrayOfNumber.join(', ')}</p>\n                    <p>{mappedNumber.join(', ')}</p>\n                    <p>{mappedNumber1.join(', ')}</p>\n                    <p>{objectWithInfo.key}</p>\n\n                    {/* tmb se pueden usar los propios Elementos de React como props */}\n                    {title}\n                </div>\n\n            )\n        }\n    }\n\n\n\n\n    /*   Todo lo que está dentro del return es lo que se va a mostrar   */\n    return(\n       <div className=\"App-header\">\n\n                {/*Para pasarle una propiedad al componente Hello, debemos pasarle el valor como si fuera el valor de una etiqueta html\n    nada de esto es html!! es JSX*/}\n\n                <Hello title='Podemos repetirlo varias veces'/>\n                <Hello title='Hello from props'/>\n\n                <Yasss title='Hello from yass' />\n\n                <Text text='texto' />\n\n\n                {/* Podemos pasarle una props llamada isActivated\n                    se suelen separar dejando una props en cada línea\n                    si hay muchas, se ordenan alfabéticamente     */}\n                <Boolean\n                    text='prueba con booleanos'\n                    isActivated={false}\n                    // si a \"isActivated\" no se le pasa ningún valor, da por hecho que es true, en nuesto caso: \"on!\"\n                />\n\n\n                <Number number={2} text='Esto es un número' boolean={true} />\n\n\n                {/*  arrayOfNumber: Se abren los corchetes para crear el array\n                     objectWithInfo: doble llaves (con las llaves propias del objeto dentro) */}\n                <Numbers\n                    arrayOfNumber={[2 ,3, 10]}\n                    multiply1={(number) => number * 4}\n                    objectWithInfo={{ key: 'First Value', key2: 'otherValue' }}\n                    text='Números'\n                    title={<h1>Este es el título</h1>}\n                />\n            </div>\n\n    );\n}\n\nexport default Props;"]},"metadata":{},"sourceType":"module"}