{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_01_useFetch/MultipleCustomHooks.js\",\n    _s = $RefreshSig$();\n\n// useFetch - CustomHook (124)\n// Axios ( se ve más adelante) --> para hacer peticiones http\n// vamos a crear un custom hook que permita hacer peticiones a cualquier url\n// varios hooks personalizados van a interactuar entre sí\n//  a)   https://breakingbadapi.com/\n//  en la web:\n//  Get quote by id: Endpoint to get quote by id\n//  b)  /api/quotes/1\n//  poner en postman:\n//  petición get\n//  https://www.breakingbadapi.com/api/quotes/1\n// (esta url tmb se utiliza en este componente)\n// Resultado:\n// es un array y dentro un objeto:\n// [\n//     {\n//         \"quote_id\": 1,\n//         \"quote\": \"I am not in danger, Skyler. I am the danger!\",\n//         \"author\": \"Walter White\",\n//         \"series\": \"Breaking Bad\"\n//     }\n// ]\n// ir probando:\n// /api/quotes/2    /api/quotes/3   etc.\nimport React from \"react\"; // import {useFetch} from \"../../hooks/useFetch\";\n\nimport { useFetch1 } from \"../../hooks/useFetch1\";\nimport { useCouter1 } from \"../../hooks/useCouter1\";\nimport '../04_00_hooks_useState/style.css'; // el componente tiene dos estados: cuando está cargando y cuando ya tiene la info\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultipleCustomHook = () => {\n  _s();\n\n  // useFetch + useCouter2\n  // en el state ( en el componente de useFetch )\n  // va a regresar el counter y el increment\n  // importamos el componente de useCouter1 de hooks\n  // cuando se haga click en el botón, se va a incrementar en 1\n  // valor inicial de uno --> quotes/1 --> que después pasa a /${ counter }\n  const {\n    counter,\n    increment\n  } = useCouter1(1); // se manda llamar el useFetch\n  // es la url que se utilizó en postman\n  // el useFetch regresa un state --> es su return está el state\n  // loading: aparece mientras carga y después se muestra la data\n  // ${ counter } -->  https://www.breakingbadapi.com/api/quotes/1\n  // se desestructura\n\n  const {\n    isLoading,\n    data,\n    hasError\n  } = useFetch1(` https://www.breakingbadapi.com/api/quotes/${counter} `); // en el API la data viene con un array\n  // se desestructura algo que viene de la data: el author y quote\n  // dentro de data está author y quote (están dentro del objeto)\n  // se hace una validación\n  // !!data && data[0];   -->  si la data tiene un valor, entonces toma la data en la posición 0 (el primer elemento del array)\n  // condicional: si el primer argumento es correcto, entonces ejecuta data[0]\n  // en caso de que no exista, no sigue evaluando\n  // !!null es un false (es doble negación)\n\n  const {\n    author,\n    quote\n  } = !!data && data[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" useFetch - Custom Hook \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" BreakingBad Quotes \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info text-center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      className: \" blockquote text-right \",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-0\",\n        children: [\" Hello there! \", quote, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"blockquote-footer m-5\",\n        children: [\" - \", author, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: isLoading,\n      onClick: increment,\n      children: \"Siguiente quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MultipleCustomHook, \"Sd8ipLZED/BJEw7aKi41VgefdBE=\", false, function () {\n  return [useCouter1, useFetch1];\n});\n\n_c = MultipleCustomHook;\nexport default MultipleCustomHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleCustomHook\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_01_useFetch/MultipleCustomHooks.js"],"names":["React","useFetch1","useCouter1","MultipleCustomHook","counter","increment","isLoading","data","hasError","author","quote"],"mappings":";;;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,OAAO,mCAAP,C,CAEA;;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B;AACA;AAEA;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBH,UAAU,CAAC,CAAD,CAAzC,CAT6B,CAY7B;AACA;AACA;AACA;AACA;AACA;;AACA,QAAM;AAAEI,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,MAAgCP,SAAS,CAAG,8CAA8CG,OAAS,GAA1D,CAA/C,CAlB6B,CAoB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoB,CAAC,CAACH,IAAF,IAAUA,IAAI,CAAC,CAAD,CAAxC;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,YAHJ,EAUQD,SAAS,gBAED;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFC,gBAMD;AAAY,MAAA,SAAS,EAAC,yBAAtB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA,qCAAoCI,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,SAAS,EAAC,uBAAlB;AAAA,0BAA+CD,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBhB,eA6BI;AACI,MAAA,SAAS,EAAC,iBADd;AAEI,MAAA,QAAQ,EAAGH,SAFf;AAGI,MAAA,OAAO,EAAGD,SAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH,CAvED;;GAAMF,kB;UAS6BD,U,EASOD,S;;;KAlBpCE,kB;AAwEN,eAAeA,kBAAf","sourcesContent":["\n// useFetch - CustomHook (124)\n\n// Axios ( se ve más adelante) --> para hacer peticiones http\n\n// vamos a crear un custom hook que permita hacer peticiones a cualquier url\n// varios hooks personalizados van a interactuar entre sí\n\n//  a)   https://breakingbadapi.com/\n\n//  en la web:\n//  Get quote by id: Endpoint to get quote by id\n//  b)  /api/quotes/1\n\n//  poner en postman:\n//  petición get\n//  https://www.breakingbadapi.com/api/quotes/1\n\n// (esta url tmb se utiliza en este componente)\n\n// Resultado:\n// es un array y dentro un objeto:\n\n// [\n//     {\n//         \"quote_id\": 1,\n//         \"quote\": \"I am not in danger, Skyler. I am the danger!\",\n//         \"author\": \"Walter White\",\n//         \"series\": \"Breaking Bad\"\n//     }\n// ]\n\n\n// ir probando:\n// /api/quotes/2    /api/quotes/3   etc.\n\nimport React from \"react\";\n// import {useFetch} from \"../../hooks/useFetch\";\nimport {useFetch1} from \"../../hooks/useFetch1\";\nimport {useCouter1} from \"../../hooks/useCouter1\";\nimport '../04_00_hooks_useState/style.css'\n\n// el componente tiene dos estados: cuando está cargando y cuando ya tiene la info\n\nconst MultipleCustomHook = () => {\n\n    // useFetch + useCouter2\n    // en el state ( en el componente de useFetch )\n\n    // va a regresar el counter y el increment\n    // importamos el componente de useCouter1 de hooks\n    // cuando se haga click en el botón, se va a incrementar en 1\n    // valor inicial de uno --> quotes/1 --> que después pasa a /${ counter }\n    const { counter, increment } = useCouter1(1);\n\n\n    // se manda llamar el useFetch\n    // es la url que se utilizó en postman\n    // el useFetch regresa un state --> es su return está el state\n    // loading: aparece mientras carga y después se muestra la data\n    // ${ counter } -->  https://www.breakingbadapi.com/api/quotes/1\n    // se desestructura\n    const { isLoading, data, hasError } = useFetch1( ` https://www.breakingbadapi.com/api/quotes/${ counter } `);\n\n    // en el API la data viene con un array\n    // se desestructura algo que viene de la data: el author y quote\n    // dentro de data está author y quote (están dentro del objeto)\n    // se hace una validación\n    // !!data && data[0];   -->  si la data tiene un valor, entonces toma la data en la posición 0 (el primer elemento del array)\n    // condicional: si el primer argumento es correcto, entonces ejecuta data[0]\n    // en caso de que no exista, no sigue evaluando\n    // !!null es un false (es doble negación)\n\n    const { author, quote } = !!data && data[0];\n\n    return (\n        <div>\n            <p> useFetch - Custom Hook </p>\n            <p> BreakingBad Quotes </p>\n            <hr/>\n\n            {/*  ternario del loading\n             muestra loading\n             y cuando tenemos la info: aparece el componente\n             */}\n            {\n                isLoading ?\n                    (\n                        <div className=\"alert alert-info text-center\">\n                            Loading...\n                        </div>\n                    ) : (\n                        <blockquote className=\" blockquote text-right \">\n                            <p className=\"mb-0\"> Hello there! { quote } </p>\n                            <footer className=\"blockquote-footer m-5\"> - { author } </footer>\n                        </blockquote>\n                    )\n            }\n\n            {/*  botón que cargue el quote\n                 necesitamos un contador para saber en qué quote estoy\n                 al hacer click, pasa a la siguiente frase\n\n                 disabled={ loading } mientras carga no se puede dar al botón\n                 */}\n            <button\n                className=\"btn btn-primary\"\n                disabled={ isLoading }\n                onClick={ increment }\n            >\n                Siguiente quote\n            </button>\n\n        </div>\n    );\n};\nexport default MultipleCustomHook;\n\n"]},"metadata":{},"sourceType":"module"}