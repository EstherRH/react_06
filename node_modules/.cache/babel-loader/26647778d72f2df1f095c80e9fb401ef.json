{"ast":null,"code":"import $7V4JZ$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $7V4JZ$forwardRef, useRef as $7V4JZ$useRef, useEffect as $7V4JZ$useEffect, createElement as $7V4JZ$createElement } from \"react\";\nimport { createContext as $7V4JZ$createContext } from \"@radix-ui/react-context\";\nimport { useComposedRefs as $7V4JZ$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive as $7V4JZ$Primitive } from \"@radix-ui/react-primitive\";\nimport { useId as $7V4JZ$useId } from \"@radix-ui/react-id\";\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst $b73a6c6685e72184$var$NAME = 'Label';\nconst [$b73a6c6685e72184$var$LabelProvider, $b73a6c6685e72184$var$useLabelContextImpl] = $7V4JZ$createContext($b73a6c6685e72184$var$NAME, {\n  id: undefined,\n  controlRef: {\n    current: null\n  }\n});\nconst $b73a6c6685e72184$export$b04be29aa201d4f5 = /*#__PURE__*/$7V4JZ$forwardRef((props, forwardedRef) => {\n  const {\n    htmlFor: htmlFor,\n    id: idProp,\n    ...labelProps\n  } = props;\n  const controlRef = $7V4JZ$useRef(null);\n  const ref = $7V4JZ$useRef(null);\n  const composedRefs = $7V4JZ$useComposedRefs(forwardedRef, ref);\n  const id = $7V4JZ$useId(idProp);\n  $7V4JZ$useEffect(() => {\n    if (htmlFor) {\n      const element = document.getElementById(htmlFor);\n      const label = ref.current;\n\n      if (label && element) {\n        const getAriaLabel = () => element.getAttribute('aria-labelledby');\n\n        const ariaLabelledBy1 = [id, getAriaLabel()].filter(Boolean).join(' ');\n        element.setAttribute('aria-labelledby', ariaLabelledBy1);\n        controlRef.current = element;\n        return () => {\n          var _getAriaLabel;\n          /**\n          * We get the latest attribute value because at the time that this cleanup fires,\n          * the values from the closure may have changed.\n          */\n\n\n          const ariaLabelledBy = (_getAriaLabel = getAriaLabel()) === null || _getAriaLabel === void 0 ? void 0 : _getAriaLabel.replace(id, '');\n          if (ariaLabelledBy === '') element.removeAttribute('aria-labelledby');else if (ariaLabelledBy) element.setAttribute('aria-labelledby', ariaLabelledBy);\n        };\n      }\n    }\n  }, [id, htmlFor]);\n  return /*#__PURE__*/$7V4JZ$createElement($b73a6c6685e72184$var$LabelProvider, {\n    id: id,\n    controlRef: controlRef\n  }, /*#__PURE__*/$7V4JZ$createElement($7V4JZ$Primitive.span, $7V4JZ$babelruntimehelpersesmextends({\n    role: \"label\",\n    id: id\n  }, labelProps, {\n    ref: composedRefs,\n    onMouseDown: event => {\n      var _props$onMouseDown;\n\n      (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event); // prevent text selection when double clicking label\n\n      if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n    },\n    onClick: event => {\n      var _props$onClick;\n\n      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);\n      if (!controlRef.current || event.defaultPrevented) return;\n      const isClickingControl = controlRef.current.contains(event.target); // Ensure event was generated by a user action\n      // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n\n      const isUserClick = event.isTrusted === true;\n      /**\n      * When a label is wrapped around the control it labels, we trigger the appropriate events\n      * on the control when the label is clicked. We do nothing if the user is already clicking the\n      * control inside the label.\n      */\n\n      if (!isClickingControl && isUserClick) {\n        controlRef.current.click();\n        controlRef.current.focus();\n      }\n    }\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($b73a6c6685e72184$export$b04be29aa201d4f5, {\n  displayName: $b73a6c6685e72184$var$NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $b73a6c6685e72184$export$feddbbf47baabdb9 = element => {\n  const context = $b73a6c6685e72184$var$useLabelContextImpl('LabelConsumer');\n  const {\n    controlRef: controlRef\n  } = context;\n  $7V4JZ$useEffect(() => {\n    if (element) controlRef.current = element;\n  }, [element, controlRef]);\n  return context.id;\n};\n\nconst $b73a6c6685e72184$export$be92b6f5f03c0fe9 = $b73a6c6685e72184$export$b04be29aa201d4f5;\nexport { $b73a6c6685e72184$export$b04be29aa201d4f5 as Label, $b73a6c6685e72184$export$be92b6f5f03c0fe9 as Root, $b73a6c6685e72184$export$feddbbf47baabdb9 as useLabelContext };","map":{"version":3,"sources":["packages/react/label/src/Label.tsx"],"names":["NAME","createContext","id","controlRef","current","Label","React","ref","composedRefs","useComposedRefs","useId","element","document","label","getAriaLabel","ariaLabelledBy","event","isClickingControl","isUserClick","useLabelContext","context","useLabelContextImpl","Root"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelContextValue = { id?: string; controlRef: React.MutableRefObject<HTMLElement | null> };\nconst [LabelProvider, useLabelContextImpl] = createContext<LabelContextValue>(NAME, {\n  id: undefined,\n  controlRef: { current: null },\n});\n\ntype LabelElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface LabelProps extends PrimitiveSpanProps {\n  htmlFor?: string;\n}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  const { htmlFor, id: idProp, ...labelProps } = props;\n  const controlRef = React.useRef<HTMLElement | null>(null);\n  const ref = React.useRef<HTMLSpanElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const id = useId(idProp);\n\n  React.useEffect(() => {\n    if (htmlFor) {\n      const element = document.getElementById(htmlFor);\n      const label = ref.current;\n      if (label && element) {\n        const getAriaLabel = () => element.getAttribute('aria-labelledby');\n        const ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(' ');\n        element.setAttribute('aria-labelledby', ariaLabelledBy);\n        controlRef.current = element;\n        return () => {\n          /**\n           * We get the latest attribute value because at the time that this cleanup fires,\n           * the values from the closure may have changed.\n           */\n          const ariaLabelledBy = getAriaLabel()?.replace(id, '');\n          if (ariaLabelledBy === '') {\n            element.removeAttribute('aria-labelledby');\n          } else if (ariaLabelledBy) {\n            element.setAttribute('aria-labelledby', ariaLabelledBy);\n          }\n        };\n      }\n    }\n  }, [id, htmlFor]);\n\n  return (\n    <LabelProvider id={id} controlRef={controlRef}>\n      <Primitive.span\n        role=\"label\"\n        id={id}\n        {...labelProps}\n        ref={composedRefs}\n        onMouseDown={(event) => {\n          props.onMouseDown?.(event);\n          // prevent text selection when double clicking label\n          if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }}\n        onClick={(event) => {\n          props.onClick?.(event);\n          if (!controlRef.current || event.defaultPrevented) return;\n          const isClickingControl = controlRef.current.contains(event.target as Node);\n          // Ensure event was generated by a user action\n          // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n          const isUserClick = event.isTrusted === true;\n          /**\n           * When a label is wrapped around the control it labels, we trigger the appropriate events\n           * on the control when the label is clicked. We do nothing if the user is already clicking the\n           * control inside the label.\n           */\n          if (!isClickingControl && isUserClick) {\n            controlRef.current.click();\n            controlRef.current.focus();\n          }\n        }}\n      />\n    </LabelProvider>\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst useLabelContext = (element?: HTMLElement | null) => {\n  const context = useLabelContextImpl('LabelConsumer');\n  const { controlRef } = context;\n\n  React.useEffect(() => {\n    if (element) controlRef.current = element;\n  }, [element, controlRef]);\n\n  return context.id;\n};\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n  //\n  useLabelContext,\n};\nexport type { LabelProps };\n"]},"metadata":{},"sourceType":"module"}