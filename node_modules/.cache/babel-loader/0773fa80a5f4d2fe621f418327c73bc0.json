{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_01_useFetch/MultipleCustomHooks.js\",\n    _s = $RefreshSig$();\n\n// useFetch - CustomHook\n// vamos a crear un custom hook que permita hacer peticiones a cualquier url\n// varios hooks personalizados van a interactuar entre sí\n//  a)   https://breakingbadapi.com/\n//  en la web:\n//  Get quote by id: Endpoint to get quote by id\n//  b)  /api/quotes/1\n//  poner en postman:\n//  petición get\n//  https://www.breakingbadapi.com/api/quotes/1\n// (esta url tmb se utiliza en este componente)\n// Resultado:\n// es un array y dentro un objeto:\n// [\n//     {\n//         \"quote_id\": 1,\n//         \"quote\": \"I am not in danger, Skyler. I am the danger!\",\n//         \"author\": \"Walter White\",\n//         \"series\": \"Breaking Bad\"\n//     }\n// ]\n// ir probando:\n// /api/quotes/2    /api/quotes/3   etc.\nimport React from \"react\";\nimport '../../components/04_00_hooks/style.css';\nimport { useFetch } from \"../../hooks/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MultipleCustomHook = () => {\n  _s();\n\n  // es la url que se utilizó en postman\n  // el useFetch regresa un state\n  const state = useFetch(` https://www.breakingbadapi.com/api/quotes/1 `);\n  const {\n    author,\n    quote\n  } = !!data && data[0];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" useFetch - Custom Hook \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info text-center\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"blockquote\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-0\",\n          children: \" Hello there! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n          className: \"blockquote.gooter\",\n          children: \" Herrero \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MultipleCustomHook, \"Yxu3ObV1bsFA0kI7bkGj8DK42us=\", false, function () {\n  return [useFetch];\n});\n\n_c = MultipleCustomHook;\nexport default MultipleCustomHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleCustomHook\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_01_useFetch/MultipleCustomHooks.js"],"names":["React","useFetch","MultipleCustomHook","state","author","quote","data","loading"],"mappings":";;;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wCAAP;AACA,SAAQC,QAAR,QAAuB,sBAAvB;;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B;AACA;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAAG,+CAAH,CAAtB;AAEA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoB,CAAC,CAACC,IAAF,IAAUA,IAAI,CAAC,CAAD,CAAxC;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAA,gBAEIC,OAAO,gBAEC;AAAK,QAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,gBAMC;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AARZ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AAyBH,CAjCD;;GAAML,kB;UAIYD,Q;;;KAJZC,kB;AAkCN,eAAeA,kBAAf","sourcesContent":["\n// useFetch - CustomHook\n\n// vamos a crear un custom hook que permita hacer peticiones a cualquier url\n// varios hooks personalizados van a interactuar entre sí\n\n//  a)   https://breakingbadapi.com/\n\n//  en la web:\n//  Get quote by id: Endpoint to get quote by id\n//  b)  /api/quotes/1\n\n//  poner en postman:\n//  petición get\n//  https://www.breakingbadapi.com/api/quotes/1\n\n// (esta url tmb se utiliza en este componente)\n\n// Resultado:\n// es un array y dentro un objeto:\n\n// [\n//     {\n//         \"quote_id\": 1,\n//         \"quote\": \"I am not in danger, Skyler. I am the danger!\",\n//         \"author\": \"Walter White\",\n//         \"series\": \"Breaking Bad\"\n//     }\n// ]\n\n\n// ir probando:\n// /api/quotes/2    /api/quotes/3   etc.\n\nimport React from \"react\";\nimport '../../components/04_00_hooks/style.css'\nimport {useFetch} from \"../../hooks/useFetch\";\n\nconst MultipleCustomHook = () => {\n\n    // es la url que se utilizó en postman\n    // el useFetch regresa un state\n    const state = useFetch( ` https://www.breakingbadapi.com/api/quotes/1 `);\n\n    const { author, quote } = !!data && data[0];\n\n    return (\n        <>\n            <p> useFetch - Custom Hook </p>\n            <hr/>\n\n            <div>\n            {\n                loading ?\n                    (\n                        <div className=\"alert alert-info text-center\">\n                            Loading...\n                        </div>\n                    ) : (\n                        <blockquote>\n                            <p className=\"mb-0\"> Hello there! </p>\n                            <footer className=\"blockquote.gooter\"> Herrero </footer>\n                        </blockquote>\n\n\n                    )\n            }\n            </div>\n\n        </>\n    );\n};\nexport default MultipleCustomHook;\n\n"]},"metadata":{},"sourceType":"module"}