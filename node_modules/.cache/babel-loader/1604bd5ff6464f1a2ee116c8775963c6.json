{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_02_useRef/FocusScreen.js\",\n    _s = $RefreshSig$();\n\n// hook: useRef\n// sirve para manejar el valor de alguna variable\n// no dispara renderizaciones cuando se hace un cambio\n// es como useState que no dispara la renderización de nuevo\n// sirve para mantener una referencia a una posición inicial\nimport React, { useRef } from \"react\";\nimport '../04_00_hooks_useState/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FocusScreen = () => {\n  _s();\n\n  // valor inicial vacío\n  // permite mantener alguna referencia y que cuando cambia no se dispare una renderización del componente\n  // useRef devuelve un objeto ref mutable cuya propiedad   .current   se inicializa\n  // con el argumento pasado (initialValue).\n  // El objeto devuelto se mantendrá persistente durante la vida completa del componente.\n  const inputRef = useRef(); // función al hacer click en el botón\n\n  const handleClick = () => {\n    // primera forma: buscar el input\n    // pone el foco y selecciona el input\n    // si hay varios, va a coger el primero\n    // document.querySelector('input').select();\n    // segunda forma\n    // CURRENT hace referencia al valor actual\n    // current es lo que imprime el useRef en consola\n    inputRef.current.select();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" useRef - Focus Screen \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef // referencia al useRef\n      ,\n      type: \"text\",\n      className: \"form-control\" // clase de boostrap\n      ,\n      placeholder: \"Nombre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-outline-primary mt-5\",\n      onClick: handleClick,\n      children: \"Focus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FocusScreen, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\");\n\n_c = FocusScreen;\nexport default FocusScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FocusScreen\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_02_useRef/FocusScreen.js"],"names":["React","useRef","FocusScreen","inputRef","handleClick","current","select"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAO,mCAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB;AACA;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAGF,MAAM,EAAvB,CAPsB,CAStB;;AACA,QAAMG,WAAW,GAAG,MAAM;AACtB;AACA;AACA;AACA;AAEA;AACA;AACA;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,MAAjB;AACH,GAVD;;AAYA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI;AACI,MAAA,GAAG,EAAGH,QADV,CACqB;AADrB;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,SAAS,EAAC,cAHd,CAG6B;AAH7B;AAII,MAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,YAPJ,eAcI;AACI,MAAA,SAAS,EAAC,8BADd;AAEI,MAAA,OAAO,EAAGC,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA9CD;;GAAMF,W;;KAAAA,W;AA+CN,eAAeA,WAAf","sourcesContent":["\n// hook: useRef\n// sirve para manejar el valor de alguna variable\n// no dispara renderizaciones cuando se hace un cambio\n// es como useState que no dispara la renderización de nuevo\n// sirve para mantener una referencia a una posición inicial\n\nimport React, {useRef} from \"react\";\nimport '../04_00_hooks_useState/style.css'\n\nconst FocusScreen = () => {\n\n    // valor inicial vacío\n    // permite mantener alguna referencia y que cuando cambia no se dispare una renderización del componente\n    // useRef devuelve un objeto ref mutable cuya propiedad   .current   se inicializa\n    // con el argumento pasado (initialValue).\n    // El objeto devuelto se mantendrá persistente durante la vida completa del componente.\n    const inputRef = useRef();\n\n    // función al hacer click en el botón\n    const handleClick = () => {\n        // primera forma: buscar el input\n        // pone el foco y selecciona el input\n        // si hay varios, va a coger el primero\n        // document.querySelector('input').select();\n\n        // segunda forma\n        // CURRENT hace referencia al valor actual\n        // current es lo que imprime el useRef en consola\n        inputRef.current.select();\n    }\n\n    return (\n        <div>\n            <h1> useRef - Focus Screen </h1>\n            <hr/>\n\n            {/*  ref se pone como referencia al input\n             se establece el foco en el input cuando se presiona el botón\n             */}\n            <input\n                ref={ inputRef } // referencia al useRef\n                type=\"text\"\n                className=\"form-control\" // clase de boostrap\n                placeholder=\"Nombre\"\n            />\n\n            <button\n                className=\"btn btn-outline-primary mt-5\"\n                onClick={ handleClick }\n            >\n                Focus\n            </button>\n\n        </div>\n    );\n};\nexport default FocusScreen;\n\n"]},"metadata":{},"sourceType":"module"}