{"ast":null,"code":"import $6vYhU$react from \"react\";\nimport { createContextScope as $6vYhU$createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs as $6vYhU$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Slot as $6vYhU$Slot } from \"@radix-ui/react-slot\"; // We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionProvider\n  * ---------------------------------------------------------------------------------------------*/\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = $6vYhU$createContextScope(PROVIDER_NAME);\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {\n    collectionRef: {\n      current: null\n    },\n    itemMap: new Map()\n  });\n\n  const CollectionProvider = props => {\n    const {\n      scope: scope,\n      children: children\n    } = props;\n    const ref = $6vYhU$react.useRef(null);\n    const itemMap = $6vYhU$react.useRef(new Map()).current;\n    return /*#__PURE__*/$6vYhU$react.createElement(CollectionProviderImpl, {\n      scope: scope,\n      itemMap: itemMap,\n      collectionRef: ref\n    }, children);\n  };\n  /*#__PURE__*/\n\n\n  Object.assign(CollectionProvider, {\n    displayName: PROVIDER_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionSlot\n  * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n  const CollectionSlot = /*#__PURE__*/$6vYhU$react.forwardRef((props, forwardedRef) => {\n    const {\n      scope: scope,\n      children: children\n    } = props;\n    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n    const composedRefs = $6vYhU$useComposedRefs(forwardedRef, context.collectionRef);\n    return /*#__PURE__*/$6vYhU$react.createElement($6vYhU$Slot, {\n      ref: composedRefs\n    }, children);\n  });\n  /*#__PURE__*/\n\n  Object.assign(CollectionSlot, {\n    displayName: COLLECTION_SLOT_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionItem\n  * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n  const CollectionItemSlot = /*#__PURE__*/$6vYhU$react.forwardRef((props, forwardedRef) => {\n    const {\n      scope: scope,\n      children: children,\n      ...itemData\n    } = props;\n    const ref = $6vYhU$react.useRef(null);\n    const composedRefs = $6vYhU$useComposedRefs(forwardedRef, ref);\n    const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n    $6vYhU$react.useEffect(() => {\n      context.itemMap.set(ref, {\n        ref: ref,\n        ...itemData\n      });\n      return () => void context.itemMap.delete(ref);\n    });\n    return /*#__PURE__*/$6vYhU$react.createElement($6vYhU$Slot, {\n      [ITEM_DATA_ATTR]: '',\n      ref: composedRefs\n    }, children);\n  });\n  /*#__PURE__*/\n\n  Object.assign(CollectionItemSlot, {\n    displayName: ITEM_SLOT_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * useCollection\n  * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n    const getItems = $6vYhU$react.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n    return getItems;\n  }\n\n  return [{\n    Provider: CollectionProvider,\n    Slot: CollectionSlot,\n    ItemSlot: CollectionItemSlot\n  }, useCollection, createCollectionScope];\n}\n\nexport { $e02a7d9cb1dc128c$export$c74125a8e3af6bb2 as createCollection };","map":{"version":3,"sources":["packages/react/collection/src/index.ts","packages/react/collection/src/Collection.tsx"],"names":["PROVIDER_NAME","name","createContextScope","createCollectionContext","collectionRef","current","itemMap","CollectionProvider","props","ref","React","COLLECTION_SLOT_NAME","CollectionSlot","context","useCollectionContext","composedRefs","useComposedRefs","ITEM_SLOT_NAME","ITEM_DATA_ATTR","CollectionItemSlot","getItems","collectionNode","orderedNodes","Array","items","orderedItems","a","b","Provider","Slot","ItemSlot"],"mappings":"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","sourcesContent":["export { createCollection } from './Collection';\nexport type { CollectionProps } from './Collection';\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\ntype SlotProps = Radix.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement>;\n    itemMap: Map<React.RefObject<ItemElement>, { ref: React.RefObject<ItemElement> } & ItemData>;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ children?: React.ReactNode; scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <Slot ref={composedRefs}>{children}</Slot>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n"]},"metadata":{},"sourceType":"module"}