{"ast":null,"code":"var _s = $RefreshSig$();\n\n// useFetchGifs --> el use de delante indica que es un hook\n// todos los hooks empiezan con use\n// los hooks son funciones\n// cómo hacer un custom hooks\n// es extraer lógica de algún componente\n// o lógica que queremos reutilizar de forma sencilla\n// funcionan como si fueran functional components\n// se extrae una pequeña lógica que vamos a implementar para realizar una carga automática\n// y cuando tengamos la data vamos a renderizarla en pantalla\n// useFetchGifs --> se encarga de hacer esa petición automática cuando se cargue el componente la primera vez\nimport { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/aaagetGifs\"; // este va a ser un custom hook\n// permite que cuando el componente carga --> realizar la petición Fecth\n// y cuándo terminó la carga\n\nexport const useFetchGifs = category => {\n  _s();\n\n  // estado inicial: objeto\n  // data: array vacío\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n  useEffect(() => {\n    // aquí se va a ejecutar la petición http\n    // hacer la petición y traer las imágenes\n    // esto es una promesa\n    getGifs(category).then(imgs => {\n      setState({\n        // se manda la info:\n        data: imgs,\n        loading: false\n      });\n    });\n  }, [category]); // a los 3 segundos se ejecuta lo que está dentro\n\n  setTimeout(() => {\n    setState({\n      data: [1, 2, 3, 4, 5, 6, 7],\n      loading: false\n    });\n  }, 3000); // se retorna el stare\n\n  return state; // { data:[], loading: true }\n}; // después se importa en GifGrid\n\n_s(useFetchGifs, \"7eCfAxKstdGsPFfBVzsIpqPrSg8=\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/hooks/useFetchGifs.js"],"names":["useEffect","useState","getGifs","useFetchGifs","category","state","setState","data","loading","then","imgs","setTimeout"],"mappings":";;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,OAAR,QAAsB,uBAAtB,C,CAGA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAKC,QAAF,IAAgB;AAAA;;AAExC;AACA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAE;AAChCM,IAAAA,IAAI,EAAE,EAD0B;AAEhCC,IAAAA,OAAO,EAAE;AAFuB,GAAF,CAAlC;AAKAR,EAAAA,SAAS,CAAE,MAAM;AAEb;AACA;AACA;AACAE,IAAAA,OAAO,CAAEE,QAAF,CAAP,CACKK,IADL,CACWC,IAAI,IAAI;AACXJ,MAAAA,QAAQ,CAAC;AACL;AACAC,QAAAA,IAAI,EAAEG,IAFD;AAGLF,QAAAA,OAAO,EAAE;AAHJ,OAAD,CAAR;AAKH,KAPL;AASH,GAdQ,EAcN,CAACJ,QAAD,CAdM,CAAT,CAVwC,CA2BxC;;AACAO,EAAAA,UAAU,CAAG,MAAM;AACfL,IAAAA,QAAQ,CAAE;AACNC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,CADA;AAENC,MAAAA,OAAO,EAAE;AAFH,KAAF,CAAR;AAIH,GALS,EAKP,IALO,CAAV,CA5BwC,CAmCxC;;AACA,SAAOH,KAAP,CApCwC,CAoC1B;AAEjB,CAtCM,C,CAwCP;;GAxCaF,Y","sourcesContent":["\n// useFetchGifs --> el use de delante indica que es un hook\n// todos los hooks empiezan con use\n\n// los hooks son funciones\n\n// cómo hacer un custom hooks\n// es extraer lógica de algún componente\n// o lógica que queremos reutilizar de forma sencilla\n\n// funcionan como si fueran functional components\n\n// se extrae una pequeña lógica que vamos a implementar para realizar una carga automática\n// y cuando tengamos la data vamos a renderizarla en pantalla\n// useFetchGifs --> se encarga de hacer esa petición automática cuando se cargue el componente la primera vez\n\nimport {useEffect, useState} from \"react\";\nimport {getGifs} from \"../helpers/aaagetGifs\";\n\n\n// este va a ser un custom hook\n// permite que cuando el componente carga --> realizar la petición Fecth\n// y cuándo terminó la carga\n\nexport const useFetchGifs = ( category ) => {\n\n    // estado inicial: objeto\n    // data: array vacío\n\n    const [state, setState] = useState ({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        // aquí se va a ejecutar la petición http\n        // hacer la petición y traer las imágenes\n        // esto es una promesa\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    // se manda la info:\n                    data: imgs,\n                    loading: false\n                })\n            } )\n\n    }, [category])\n\n\n    // a los 3 segundos se ejecuta lo que está dentro\n    setTimeout ( () => {\n        setState ({\n            data: [1,2,3,4,5,6,7],\n            loading: false\n        })\n    }, 3000 );\n\n    // se retorna el stare\n    return state; // { data:[], loading: true }\n\n}\n\n// después se importa en GifGrid\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}