{"ast":null,"code":"var _s = $RefreshSig$();\n\n// useFetch - CustomHook (124)\n//   es el componente que va a trabajar con la info de useFetch\n//  los dos hooks se comunican\nimport React, { useEffect, useState } from \"react\"; // ( url ) --> pedimos la url -->  https://www.breakingbadapi.com/api/quotes/1\n\nexport const useFetch = url => {\n  _s();\n\n  // esta es la data que se coloca al final en el return\n  // se le pasa la info: data, loading y error\n  const [state, setState] = useState({\n    data: null,\n    isLoading: true,\n    hasError: null // maneja si hay un error\n\n  }); // cada vez que cambia la url --> se dispara el efecto\n  // si la url es la misma, no pasa nada\n\n  useEffect(() => {\n    // si queremos que aparezca el \"loading\" cada vez que presionamos el botón de \"siguiente quote\"\n    // vuelve a poner el loading en true\n    // regresa un nuevo estado\n    // si se manda el setState a un objeto, hay que pasarle todas las propiedades\n    setState({\n      data: null,\n      isLoading: true,\n      error: null\n    }); // hacemos la petición fetch:\n\n    fetch(url) // regresa una promesa:\n    .then(respuesta => respuesta.json()).then(data => {\n      // cuando tenemos la data, llamamos al set State\n      setState({\n        isLoading: false,\n        // en false, porque ya se terminó de cargar\n        error: null,\n        // porque no hay ningún error\n        data\n      });\n    });\n  }, [url]); // deps: [url] --> le estamos diciendo: ejecútate solo cuando la url cambia\n\n  return state;\n};\n\n_s(useFetch, \"1YyizTvauvMnJfUh8mrKT7jhCSQ=\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/hooks/useFetch.js"],"names":["React","useEffect","useState","useFetch","url","state","setState","data","isLoading","hasError","error","fetch","then","respuesta","json"],"mappings":";;AACA;AAEA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAKC,GAAF,IAAW;AAAA;;AAE/B;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAC/BK,IAAAA,IAAI,EAAE,IADyB;AAE/BC,IAAAA,SAAS,EAAE,IAFoB;AAG/BC,IAAAA,QAAQ,EAAE,IAHqB,CAGf;;AAHe,GAAD,CAAlC,CAJ+B,CAY/B;AACA;;AACAR,EAAAA,SAAS,CAAE,MAAK;AAEZ;AACA;AACA;AACA;AACAK,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,SAAS,EAAE,IAAzB;AAA+BE,MAAAA,KAAK,EAAE;AAAtC,KAAF,CAAR,CANY,CAQZ;;AACAC,IAAAA,KAAK,CAAEP,GAAF,CAAL,CACI;AADJ,KAEKQ,IAFL,CAEWC,SAAS,IAAIA,SAAS,CAACC,IAAV,EAFxB,EAGKF,IAHL,CAGWL,IAAI,IAAI;AAEX;AACAD,MAAAA,QAAQ,CAAC;AACLE,QAAAA,SAAS,EAAE,KADN;AACa;AAClBE,QAAAA,KAAK,EAAE,IAFF;AAES;AACdH,QAAAA;AAHK,OAAD,CAAR;AAKH,KAXL;AAYH,GArBQ,EAqBN,CAACH,GAAD,CArBM,CAAT,CAd+B,CAqC/B;;AAEA,SAAOC,KAAP;AACH,CAxCM;;GAAMF,Q","sourcesContent":["\n// useFetch - CustomHook (124)\n\n//   es el componente que va a trabajar con la info de useFetch\n//  los dos hooks se comunican\n\nimport React, {useEffect, useState} from \"react\";\n\n// ( url ) --> pedimos la url -->  https://www.breakingbadapi.com/api/quotes/1\nexport const useFetch = ( url ) => {\n\n    // esta es la data que se coloca al final en el return\n    // se le pasa la info: data, loading y error\n    const [state, setState] = useState({\n        data: null,\n        isLoading: true,\n        hasError: null  // maneja si hay un error\n    });\n\n    \n\n    // cada vez que cambia la url --> se dispara el efecto\n    // si la url es la misma, no pasa nada\n    useEffect( () =>{\n\n        // si queremos que aparezca el \"loading\" cada vez que presionamos el botón de \"siguiente quote\"\n        // vuelve a poner el loading en true\n        // regresa un nuevo estado\n        // si se manda el setState a un objeto, hay que pasarle todas las propiedades\n        setState( { data: null, isLoading: true, error: null } )\n\n        // hacemos la petición fetch:\n        fetch( url )\n            // regresa una promesa:\n            .then( respuesta => respuesta.json() )\n            .then( data => {\n\n                // cuando tenemos la data, llamamos al set State\n                setState({\n                    isLoading: false, // en false, porque ya se terminó de cargar\n                    error: null,  // porque no hay ningún error\n                    data\n                })\n            });\n    }, [url])\n\n    // deps: [url] --> le estamos diciendo: ejecútate solo cuando la url cambia\n\n    return state;\n}\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}