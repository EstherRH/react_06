{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/autocomplete/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport './Autoc.css';\nimport Autosuggest from 'react-autosuggest'; // instalar\n\nimport { useState } from 'react'; // array con los datos: personajes de marvel\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  personaje: \"Spider Man\"\n}, {\n  personaje: \"Iron Man\"\n}, {\n  personaje: \"Viuda negra\"\n}, {\n  personaje: \"Capitana marvel\"\n}, {\n  personaje: \"She Hulk\"\n}, {\n  personaje: \"Wonder Woman\"\n}, {\n  personaje: \"Capitan América\"\n}, {\n  personaje: \"Wanda\"\n}, {\n  personaje: \"Bruja Escarlata\"\n}, {\n  personaje: \"Thanos\"\n}, {\n  personaje: \"Pantera negra\"\n}, {\n  personaje: \"Thor\"\n}, {\n  personaje: \"Doctor Strange\"\n}]; // autocomplete --> el navegador predice el valor, basándose en los datos del array\n// se puede hacer un array o buscando datos en una api\n\nfunction Autocomplete() {\n  _s();\n\n  const [personajes, setpersonajes] = useState(data); // info de los personajes (data)\n\n  const [value, setValue] = useState(\"\"); // valor del input, valor inicial --> string vacío\n\n  const [personajeSeleccionado, setpersonajeSeleccionado] = useState({}); // personaje que se ha seleccionado --> en el autocomplete se puede seleccionar un valor\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setpersonajes(filtrarpersonajes(value));\n  };\n\n  const filtrarpersonajes = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    var filtrado = data.filter(personaje => {\n      var textoCompleto = personaje.personaje;\n\n      if (textoCompleto.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").includes(inputValue)) {\n        return personaje;\n      }\n    });\n    return inputLength === 0 ? [] : filtrado;\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setpersonajes([]);\n  };\n\n  const getSuggestionValue = suggestion => {\n    return `${suggestion.personaje}`;\n  };\n\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sugerencia\",\n    onClick: () => seleccionarpersonaje(suggestion),\n    children: `${suggestion.personaje}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n\n  const seleccionarpersonaje = personaje => {\n    setpersonajeSeleccionado(personaje);\n  };\n\n  const onChange = (e, {\n    newValue\n  }) => {\n    setValue(newValue);\n  };\n\n  const inputProps = {\n    placeholder: \"Nombre del personaje\",\n    value,\n    onChange\n  };\n\n  const eventEnter = e => {\n    if (e.key == \"Enter\") {\n      var split = e.target.value.split('-');\n      var personaje = {\n        personaje: split[0].trim()\n      };\n      seleccionarpersonaje(personaje);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: personajes,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      onSuggestionSelected: eventEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Autocomplete, \"p1BtZgH3ytjg1rXtFamOhnfpiPc=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/autocomplete/Autocomplete.js"],"names":["Autosuggest","useState","data","personaje","Autocomplete","personajes","setpersonajes","value","setValue","personajeSeleccionado","setpersonajeSeleccionado","onSuggestionsFetchRequested","filtrarpersonajes","inputValue","trim","toLowerCase","inputLength","length","filtrado","filter","textoCompleto","normalize","replace","includes","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","seleccionarpersonaje","onChange","e","newValue","inputProps","placeholder","eventEnter","key","split","target"],"mappings":"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","sourcesContent":["import './Autoc.css';\nimport Autosuggest from 'react-autosuggest'; // instalar\nimport { useState } from 'react';\n\n// array con los datos: personajes de marvel\nconst data = [\n  { personaje: \"Spider Man\" },\n  { personaje: \"Iron Man\" },\n  { personaje: \"Viuda negra\" },\n  { personaje: \"Capitana marvel\" },\n  { personaje: \"She Hulk\" },\n  { personaje: \"Wonder Woman\" },\n  { personaje: \"Capitan América\" },\n  { personaje: \"Wanda\" },\n  { personaje: \"Bruja Escarlata\" },\n  { personaje: \"Thanos\" },\n  { personaje: \"Pantera negra\" },\n  { personaje: \"Thor\" },\n  { personaje: \"Doctor Strange\" },\n];\n\n// autocomplete --> el navegador predice el valor, basándose en los datos del array\n// se puede hacer un array o buscando datos en una api\nfunction Autocomplete() {\n  const[personajes, setpersonajes]= useState(data); // info de los personajes (data)\n  const[value, setValue]= useState(\"\");   // valor del input, valor inicial --> string vacío\n  const[personajeSeleccionado, setpersonajeSeleccionado]= useState({});  // personaje que se ha seleccionado --> en el autocomplete se puede seleccionar un valor\n\n  const onSuggestionsFetchRequested=({value})=>{\n    setpersonajes(filtrarpersonajes(value));\n  }\n\n  const filtrarpersonajes=(value)=>{\n    const inputValue=value.trim().toLowerCase();\n    const inputLength=inputValue.length;\n\n    var filtrado=data.filter((personaje)=>{\n      var textoCompleto=personaje.personaje;\n\n      if(textoCompleto.toLowerCase()\n          .normalize(\"NFD\")\n          .replace(/[\\u0300-\\u036f]/g, \"\")\n          .includes(inputValue)){\n        return personaje;\n      }\n    });\n\n    return inputLength===0 ? [] : filtrado;\n  }\n\n  const onSuggestionsClearRequested = () =>{\n    setpersonajes([]);\n  }\n\n  const getSuggestionValue=(suggestion)=>{\n    return `${suggestion.personaje}`;\n  }\n\n  const renderSuggestion=(suggestion)=>(\n      <div className='sugerencia' onClick={()=>seleccionarpersonaje(suggestion)}>\n        {`${suggestion.personaje}`}\n      </div>\n  );\n\n  const seleccionarpersonaje=(personaje)=>{\n    setpersonajeSeleccionado(personaje);\n  }\n\n  const onChange=(e, {newValue})=>{\n    setValue(newValue);\n  }\n\n  const inputProps={\n    placeholder:\"Nombre del personaje\",\n    value,\n    onChange\n  };\n\n  const eventEnter=(e)=>{\n    if(e.key == \"Enter\"){\n      var split = e.target.value.split('-');\n      var personaje ={\n        personaje: split[0].trim(),\n      };\n      seleccionarpersonaje(personaje);\n    }\n  }\n\n  return (\n      <div className=\"App\">\n        <Autosuggest\n            suggestions={personajes}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            onSuggestionSelected={eventEnter}\n        />\n\n      </div>\n  );\n}\n\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}