{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_useEffect/FormWithCustomHook.js\",\n    _s = $RefreshSig$();\n\n// formulario con custom hook (122)\n// se crea un custom hook que nos ayude a manejar el formulario\n// va a ser: hooks/useForm.js\n// más info: https://react-hook-form.com/get-started\nimport React, { useEffect } from \"react\";\nimport '../04_00_hooks_useState/style.css';\nimport { useForm } from \"../../hooks/useForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormWithCustomHook = () => {\n  _s();\n\n  // se cambia el useState por el useForm\n  // se le pasa formValues y la función handleInputChange\n  // se desestructura y viene de useForm\n  // se importa arriba\n  const {\n    formState,\n    onInputChange,\n    onResetForm,\n    username,\n    email,\n    password\n  } = useForm({\n    username: '',\n    // objeto vacío,   es el name que aparece en en input, más abajo\n    email: '',\n    password: '' // se agrega el password\n\n  }); // lo que está comentando: ahora está en el custom hook\n  // const { username, email, password } = formState;\n  // esta función se coloca en el custom hook\n  // se puede extraer la lógica\n  // así se podría implementar la función en varios formularios\n  // const onInputChange = ({ target }) => {\n  //     setFormState({\n  //         ...formState,\n  //         [ target.username ]: target.value\n  //     });\n  //\n  // }\n\n  return (\n    /*#__PURE__*/\n    // se actualiza del fragment a form\n    // el submit es la función handleInputChange\n    _jsxDEV(\"form\", {\n      onSubmit: onResetForm,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Simple Form CUSTOM Hook \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          className: \"form-control\",\n          placeholder: \"Tu nombre\",\n          autoComplete: \"off\",\n          value: username,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          className: \"form-control\",\n          placeholder: \"email@gmail.com\",\n          autoComplete: \"off\",\n          value: email,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          className: \"form-control\",\n          placeholder: \"*****\",\n          value: password,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: onResetForm,\n        children: \"Borrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(FormWithCustomHook, \"kSUShV4GIgxvSnQQwA1v5OQOAQM=\", false, function () {\n  return [useForm];\n});\n\n_c = FormWithCustomHook;\nexport default FormWithCustomHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormWithCustomHook\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_useEffect/FormWithCustomHook.js"],"names":["React","useEffect","useForm","FormWithCustomHook","formState","onInputChange","onResetForm","username","email","password"],"mappings":";;;AACA;AAEA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mCAAP;AACA,SAAQC,OAAR,QAAsB,qBAAtB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA,WAA5B;AAAyCC,IAAAA,QAAzC;AAAmDC,IAAAA,KAAnD;AAA0DC,IAAAA;AAA1D,MAAuEP,OAAO,CAAC;AACjFK,IAAAA,QAAQ,EAAE,EADuE;AAClE;AACfC,IAAAA,KAAK,EAAE,EAF0E;AAGjFC,IAAAA,QAAQ,EAAE,EAHuE,CAGnE;;AAHmE,GAAD,CAApF,CAN6B,CAa7B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA;AAEI;AACA;AACA;AAAM,MAAA,QAAQ,EAAEH,WAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACO,UAAA,IAAI,EAAC,UADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,WAHnB;AAIO,UAAA,YAAY,EAAC,KAJpB;AAKO,UAAA,KAAK,EAAIC,QALhB;AAMO,UAAA,QAAQ,EAAGF;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAcI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACO,UAAA,IAAI,EAAC,OADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,iBAHnB;AAIO,UAAA,YAAY,EAAC,KAJpB;AAKO,UAAA,KAAK,EAAIG,KALhB;AAMO,UAAA,QAAQ,EAAGH;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ,eAyBI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AACO,UAAA,IAAI,EAAC,UADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,OAHnB;AAIO,UAAA,KAAK,EAAII,QAJhB;AAKO,UAAA,QAAQ,EAAGJ;AALlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAzBJ,eAsCI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAC,iBAFd;AAGI,QAAA,OAAO,EAAGC,WAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAmDH,CA/ED;;GAAMH,kB;UAM2ED,O;;;KAN3EC,kB;AAgFN,eAAeA,kBAAf","sourcesContent":["\n// formulario con custom hook (122)\n\n// se crea un custom hook que nos ayude a manejar el formulario\n// va a ser: hooks/useForm.js\n\n// más info: https://react-hook-form.com/get-started\n\nimport React, {useEffect} from \"react\";\nimport '../04_00_hooks_useState/style.css'\nimport {useForm} from \"../../hooks/useForm\";\n\nconst FormWithCustomHook = () => {\n\n    // se cambia el useState por el useForm\n    // se le pasa formValues y la función handleInputChange\n    // se desestructura y viene de useForm\n    // se importa arriba\n    const { formState, onInputChange, onResetForm, username, email, password } = useForm({\n        username: '',  // objeto vacío,   es el name que aparece en en input, más abajo\n        email: '',\n        password: ''  // se agrega el password\n    });\n\n\n    // lo que está comentando: ahora está en el custom hook\n    // const { username, email, password } = formState;\n\n    // esta función se coloca en el custom hook\n    // se puede extraer la lógica\n    // así se podría implementar la función en varios formularios\n    // const onInputChange = ({ target }) => {\n    //     setFormState({\n    //         ...formState,\n    //         [ target.username ]: target.value\n    //     });\n    //\n    // }\n\n\n    return (\n\n        // se actualiza del fragment a form\n        // el submit es la función handleInputChange\n        <form onSubmit={onResetForm}>\n            <p> Simple Form CUSTOM Hook </p>\n            <hr/>\n\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"username\"\n                       className=\"form-control\"\n                       placeholder=\"Tu nombre\"\n                       autoComplete=\"off\"\n                       value= { username }\n                       onChange={ onInputChange }\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"email\"\n                       className=\"form-control\"\n                       placeholder=\"email@gmail.com\"\n                       autoComplete=\"off\"\n                       value= { email }\n                       onChange={ onInputChange }\n                />\n            </div>\n            {/* input  -->  agregamos password */}\n            <div className=\"form-group\">\n                <input type=\"password\"\n                       name=\"password\"\n                       className=\"form-control\"\n                       placeholder=\"*****\"\n                       value= { password }\n                       onChange={ onInputChange }\n                />\n            </div>\n\n            {/*  añadimos el botón\n            reset: restablece los valores al punto inicial\n            */}\n            <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                onClick={ onResetForm }>\n                Borrar\n            </button>\n\n        </form>\n    );\n};\nexport default FormWithCustomHook;\n\n\n\n"]},"metadata":{},"sourceType":"module"}