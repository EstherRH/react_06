{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_hooks/UseEffectMessage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Message = () => {\n  _s();\n\n  const [coords, setCoords] = useState({\n    x: 0,\n    y: 0\n  }); // queremos que se ejecute cuando el componente es ejecutado por primera vez\n\n  useEffect(() => {\n    // van a aparecer las coordenadas X e Y\n    const mouseMove = e => {\n      const coords = {\n        x: e.x,\n        y: e.y\n      }; // se estraen las coordenadas\n\n      setCoords(coords);\n    }; // procedimiento de limpieza cuando el componente ya no se usa\n    // se le pasa la función que se definió arriba: mouseMove\n\n\n    window.addEventListener('mousemove', mouseMove);\n    return () => {\n      window.removeEventListener('mousemove', mouseMove);\n    };\n  }, []); // dependencia por la que cuál se va a escuchar\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Ha funcionado!!! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" x: \", x, \" y: \", y, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Message, \"sU+zfsd0pqvACm6RV4pW6my9ElM=\");\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_hooks/UseEffectMessage.js"],"names":["React","useEffect","useState","Message","coords","setCoords","x","y","mouseMove","e","window","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAElB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC;AAAEI,IAAAA,CAAC,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC;AAAT,GAAD,CAApC,CAFkB,CAKlB;;AACAN,EAAAA,SAAS,CAAE,MAAM;AAEb;AACA,UAAMO,SAAS,GAAIC,CAAD,IAAO;AACrB,YAAML,MAAM,GAAG;AAAEE,QAAAA,CAAC,EAAEG,CAAC,CAACH,CAAP;AAAUC,QAAAA,CAAC,EAAEE,CAAC,CAACF;AAAf,OAAf,CADqB,CACa;;AAClCF,MAAAA,SAAS,CAAGD,MAAH,CAAT;AACH,KAHD,CAHa,CAQb;AACA;;;AACAM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCH,SAArC;AAEA,WAAO,MAAM;AACVE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,WAA3B,EAAwCJ,SAAxC;AACF,KAFD;AAIH,GAhBQ,EAgBN,EAhBM,CAAT,CANkB,CAuBlB;;AAGA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,yBAASF,CAAT,UAAkBC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH,CAhCD;;GAAMJ,O;;KAAAA,O;AAiCN,eAAeA,OAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nconst Message = () => {\n\n    const [coords, setCoords] = useState({ x:0, y:0 });\n    \n\n    // queremos que se ejecute cuando el componente es ejecutado por primera vez\n    useEffect( () => {\n\n        // van a aparecer las coordenadas X e Y\n        const mouseMove = (e) => {\n            const coords = { x: e.x, y: e.y}; // se estraen las coordenadas\n            setCoords ( coords );\n        }\n\n        // procedimiento de limpieza cuando el componente ya no se usa\n        // se le pasa la función que se definió arriba: mouseMove\n        window.addEventListener('mousemove', mouseMove );\n\n        return () => {\n           window.removeEventListener('mousemove', mouseMove );\n        }\n\n    }, [] )\n    // dependencia por la que cuál se va a escuchar\n\n\n    return (\n        <>\n            <p> Ha funcionado!!! </p>\n            <p> x: { x } y: { y } </p>\n        </>\n    );\n};\nexport default Message;"]},"metadata":{},"sourceType":"module"}