{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_hooks/FormWithCustomHook.js\",\n    _s = $RefreshSig$();\n\n// se crea un custom hook que nos ayude a manejar el formulario\n// va a ser: hooks/useForm.js\nimport React, { useEffect } from \"react\";\nimport './style.css';\nimport { useForm } from \"../../hooks/useForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleFormCustom = () => {\n  _s();\n\n  // se cambia el useState por el useForm\n  // se le pasa formValues y la función handleInputChange\n  const [formValues, handleInputChange] = useForm({\n    name: '',\n    // objeto vacío,   es el name que aparece en en input, más abajo\n    email: '',\n    password: ''\n  });\n  const {\n    name,\n    email,\n    password\n  } = formValues; // esta función se coloca en el custom hook\n  // se puede extraer la lógica\n  // así se podría implementar la función en varios formularios\n  // const handleInputChange = ({ target }) => {\n  //     setFormState({\n  //         ...formState,\n  //         [ target.name ]: target.value\n  //     });\n  //\n  // }\n  // efecto que escucha cuando el email cambió\n\n  useEffect(() => {\n    console.log(' email cambió ');\n  }, [email]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(formValues);\n  };\n\n  return (\n    /*#__PURE__*/\n    // se actualiza del fragment a form\n    // el submit es la función handleInputChange\n    _jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Simple Form CUSTOM Hook \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          className: \"form-control\",\n          placeholder: \"Tu nombre\",\n          autoComplete: \"off\",\n          value: name,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          className: \"form-control\",\n          placeholder: \"email@gmail.com\",\n          autoComplete: \"off\",\n          value: email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          className: \"form-control\",\n          placeholder: \"*****\",\n          value: password,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: handleSubmit,\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(SimpleFormCustom, \"zWFVf/N1Q0SvHNPhwcL1j17sfOc=\", false, function () {\n  return [useForm];\n});\n\n_c = SimpleFormCustom;\nexport default SimpleFormCustom;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleFormCustom\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_hooks/FormWithCustomHook.js"],"names":["React","useEffect","useForm","SimpleFormCustom","formValues","handleInputChange","name","email","password","console","log","handleSubmit","e","preventDefault"],"mappings":";;;AAEA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AACA,SAAQC,OAAR,QAAsB,qBAAtB;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAE3B;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,iBAAb,IAAkCH,OAAO,CAAC;AAC5CI,IAAAA,IAAI,EAAE,EADsC;AACjC;AACXC,IAAAA,KAAK,EAAE,EAFqC;AAG5CC,IAAAA,QAAQ,EAAE;AAHkC,GAAD,CAA/C;AAMA,QAAM;AAAEF,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,UAAlC,CAV2B,CAY3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACAH,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,GAFQ,EAEN,CAAEH,KAAF,CAFM,CAAT;;AAIA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACH,GAHD;;AAKA;AAAA;AAEI;AACA;AACA;AAAM,MAAA,QAAQ,EAAEO,YAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACO,UAAA,IAAI,EAAC,MADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,WAHnB;AAIO,UAAA,YAAY,EAAC,KAJpB;AAKO,UAAA,KAAK,EAAIL,IALhB;AAMO,UAAA,QAAQ,EAAGD;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAcI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACO,UAAA,IAAI,EAAC,OADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,iBAHnB;AAIO,UAAA,YAAY,EAAC,KAJpB;AAKO,UAAA,KAAK,EAAIE,KALhB;AAMO,UAAA,QAAQ,EAAGF;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ,eAwBI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AACO,UAAA,IAAI,EAAC,UADZ;AAEO,UAAA,SAAS,EAAC,cAFjB;AAGO,UAAA,WAAW,EAAC,OAHnB;AAIO,UAAA,KAAK,EAAIG,QAJhB;AAKO,UAAA,QAAQ,EAAGH;AALlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAxBJ,eAmCI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAC,iBAFd;AAGI,QAAA,OAAO,EAAEM,YAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAgDH,CAlFD;;GAAMR,gB;UAIsCD,O;;;KAJtCC,gB;AAmFN,eAAeA,gBAAf","sourcesContent":["\n\n// se crea un custom hook que nos ayude a manejar el formulario\n// va a ser: hooks/useForm.js\n\nimport React, {useEffect} from \"react\";\nimport './style.css'\nimport {useForm} from \"../../hooks/useForm\";\n\nconst SimpleFormCustom = () => {\n\n    // se cambia el useState por el useForm\n    // se le pasa formValues y la función handleInputChange\n    const [formValues, handleInputChange] = useForm({\n        name: '',  // objeto vacío,   es el name que aparece en en input, más abajo\n        email: '',\n        password: ''\n    });\n\n    const { name, email, password } = formValues;\n\n    // esta función se coloca en el custom hook\n    // se puede extraer la lógica\n    // así se podría implementar la función en varios formularios\n    // const handleInputChange = ({ target }) => {\n    //     setFormState({\n    //         ...formState,\n    //         [ target.name ]: target.value\n    //     });\n    //\n    // }\n\n\n    // efecto que escucha cuando el email cambió\n    useEffect( () => {\n        console.log(' email cambió ')\n    }, [ email ]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(formValues);\n    }\n\n    return (\n\n        // se actualiza del fragment a form\n        // el submit es la función handleInputChange\n        <form onSubmit={handleSubmit}>\n            <p> Simple Form CUSTOM Hook </p>\n            <hr/>\n\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"name\"\n                       className=\"form-control\"\n                       placeholder=\"Tu nombre\"\n                       autoComplete=\"off\"\n                       value= { name }\n                       onChange={ handleInputChange }\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"email\"\n                       className=\"form-control\"\n                       placeholder=\"email@gmail.com\"\n                       autoComplete=\"off\"\n                       value= { email }\n                       onChange={ handleInputChange }\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type=\"password\"\n                       name=\"password\"\n                       className=\"form-control\"\n                       placeholder=\"*****\"\n                       value= { password }\n                       onChange={ handleInputChange }\n                />\n            </div>\n\n            {/*  añadimos el botón  */}\n            <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                onClick={handleSubmit}>\n                Guardar\n            </button>\n\n        </form>\n    );\n};\nexport default SimpleFormCustom;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}