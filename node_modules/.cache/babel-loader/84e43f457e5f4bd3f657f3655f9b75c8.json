{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/autocomplete/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport './Autoc.css';\nimport Autosuggest from 'react-autosuggest';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  presidente: \"Jair Messias Bolsonaro\"\n}, {\n  presidente: \"Andrés Manuel López Obrador\"\n}, {\n  presidente: \"Alberto Ángel Fernández\"\n}, {\n  presidente: \"Iván Duque Márquez\"\n}, {\n  presidente: \"Gabriel Boric Font\"\n}, {\n  presidente: \"José Pedro Castillo Terrones\"\n}, {\n  presidente: \"Guillermo Alberto Santiago Lasso Mendoza\"\n}, {\n  presidente: \"Luis Rodolfo Abinader Corona\"\n}, {\n  presidente: \"Alejandro Eduardo Giammattei Falla\"\n}, {\n  presidente: \"Carlos Andrés Alvarado Quesada\"\n}];\n\nfunction Autocomplete() {\n  _s();\n\n  const [presidentes, setPresidentes] = useState(data);\n  const [value, setValue] = useState(\"\");\n  const [presidenteSeleccionado, setPresidenteSeleccionado] = useState({});\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setPresidentes(filtrarPresidentes(value));\n  };\n\n  const filtrarPresidentes = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    var filtrado = data.filter(presidente => {\n      var textoCompleto = presidente.presidente + \" - \" + presidente.pais;\n\n      if (textoCompleto.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").includes(inputValue)) {\n        return presidente;\n      }\n    });\n    return inputLength === 0 ? [] : filtrado;\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setPresidentes([]);\n  };\n\n  const getSuggestionValue = suggestion => {\n    return `${suggestion.presidente} - ${suggestion.pais}`;\n  };\n\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sugerencia\",\n    onClick: () => seleccionarPresidente(suggestion),\n    children: `${suggestion.presidente} - ${suggestion.pais}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n\n  const seleccionarPresidente = presidente => {\n    setPresidenteSeleccionado(presidente);\n  };\n\n  const onChange = (e, {\n    newValue\n  }) => {\n    setValue(newValue);\n  };\n\n  const inputProps = {\n    placeholder: \"País o Nombre del Presidente\",\n    value,\n    onChange\n  };\n\n  const eventEnter = e => {\n    if (e.key == \"Enter\") {\n      var split = e.target.value.split('-');\n      var presidente = {\n        presidente: split[0].trim(),\n        pais: split[1].trim()\n      };\n      seleccionarPresidente(presidente);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: presidentes,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      onSuggestionSelected: eventEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Autocomplete, \"B4pWHdjnCEXEX5bv76JTV/1zbKs=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/autocomplete/Autocomplete.js"],"names":["Autosuggest","useState","data","presidente","Autocomplete","presidentes","setPresidentes","value","setValue","presidenteSeleccionado","setPresidenteSeleccionado","onSuggestionsFetchRequested","filtrarPresidentes","inputValue","trim","toLowerCase","inputLength","length","filtrado","filter","textoCompleto","pais","normalize","replace","includes","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","seleccionarPresidente","onChange","e","newValue","inputProps","placeholder","eventEnter","key","split","target"],"mappings":"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","sourcesContent":["import './Autoc.css';\nimport Autosuggest from 'react-autosuggest';\nimport { useState } from 'react';\n\nconst data = [\n  { presidente: \"Jair Messias Bolsonaro\" },\n  { presidente: \"Andrés Manuel López Obrador\" },\n  { presidente: \"Alberto Ángel Fernández\" },\n  { presidente: \"Iván Duque Márquez\" },\n  { presidente: \"Gabriel Boric Font\" },\n  { presidente: \"José Pedro Castillo Terrones\" },\n  { presidente: \"Guillermo Alberto Santiago Lasso Mendoza\" },\n  { presidente: \"Luis Rodolfo Abinader Corona\" },\n  { presidente: \"Alejandro Eduardo Giammattei Falla\" },\n  { presidente: \"Carlos Andrés Alvarado Quesada\" },\n];\n\nfunction Autocomplete() {\n  const[presidentes, setPresidentes]= useState(data);\n  const[value, setValue]= useState(\"\");\n  const[presidenteSeleccionado, setPresidenteSeleccionado]= useState({});\n\n  const onSuggestionsFetchRequested=({value})=>{\n    setPresidentes(filtrarPresidentes(value));\n  }\n\n  const filtrarPresidentes=(value)=>{\n    const inputValue=value.trim().toLowerCase();\n    const inputLength=inputValue.length;\n\n    var filtrado=data.filter((presidente)=>{\n      var textoCompleto=presidente.presidente + \" - \" +presidente.pais;\n\n      if(textoCompleto.toLowerCase()\n          .normalize(\"NFD\")\n          .replace(/[\\u0300-\\u036f]/g, \"\")\n          .includes(inputValue)){\n        return presidente;\n      }\n    });\n\n    return inputLength===0 ? [] : filtrado;\n  }\n\n  const onSuggestionsClearRequested = () =>{\n    setPresidentes([]);\n  }\n\n  const getSuggestionValue=(suggestion)=>{\n    return `${suggestion.presidente} - ${suggestion.pais}`;\n  }\n\n  const renderSuggestion=(suggestion)=>(\n      <div className='sugerencia' onClick={()=>seleccionarPresidente(suggestion)}>\n        {`${suggestion.presidente} - ${suggestion.pais}`}\n      </div>\n  );\n\n  const seleccionarPresidente=(presidente)=>{\n    setPresidenteSeleccionado(presidente);\n  }\n\n  const onChange=(e, {newValue})=>{\n    setValue(newValue);\n  }\n\n  const inputProps={\n    placeholder:\"País o Nombre del Presidente\",\n    value,\n    onChange\n  };\n\n  const eventEnter=(e)=>{\n    if(e.key == \"Enter\"){\n      var split = e.target.value.split('-');\n      var presidente ={\n        presidente: split[0].trim(),\n        pais: split[1].trim(),\n      };\n      seleccionarPresidente(presidente);\n    }\n  }\n\n  return (\n      <div className=\"App\">\n        <Autosuggest\n            suggestions={presidentes}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            onSuggestionSelected={eventEnter}\n        />\n\n      </div>\n  );\n}\n\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}