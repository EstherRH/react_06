{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_hooks/UseEfecct.js\",\n    _s = $RefreshSig$();\n\n// useEffect:\n// después de useState es el más usado\n// es muy útil cuando se quiere disparar efectos secundarios,\n// es decir, algo cambió o se modificó, dispara esta función\n// el componente se cargó por primera vez, dispara esta función\n// etc\n// es un hook que permite ejecutar un efecto secundario cuando algo suceda en nuestros componentes\n// ejemplo con  !!!  Simple Form  !!!\n// https://bluuweb.github.io/react/formularios/#form\nimport React, { useEffect, useState } from \"react\";\nimport Message from \"./UseEffectMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SimpleForm = () => {\n  _s();\n\n  // formState: pequeño formulario\n  const [formState, setFormState] = useState({\n    name: '',\n    // objeto vacío,   es el name que aparece en en input, más abajo\n    email: ''\n  }); // desestructurar:\n  // se estraen las propiedades del objeto:\n\n  const {\n    name,\n    email\n  } = formState; // recibe una funcíón de flecha\n  // tiene dependencias\n\n  useEffect(() => {\n    // regresa una función:\n    return;\n  }, []); // dependencia: se le pasa el formState -->  porque queremos escuchar sus cambios\n\n  useEffect(() => {\n    console.log('formState cambió');\n  }, [formState]);\n  useEffect(() => {\n    console.log('email cambió');\n  }, [email]); // target.name --> nombre\n  // target.value --> valor del input (son números)\n  // para que se pueda ver en el input, hay que llamar el setFormState\n  // ({ target })  --> se extrae del evento el target\n\n  const handleInputChange = ({\n    target\n  }) => {\n    setFormState({ ...formState,\n      [target.name]: target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" useEffect ejemplo de simple form \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        className: \"form-control\",\n        placeholder: \"Tu nombre\",\n        autoComplete: \"off\",\n        value: name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        className: \"form-control\",\n        placeholder: \"email@gmail.com\",\n        autoComplete: \"off\",\n        value: email,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), name && /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SimpleForm, \"1/mjkRIfojMX+6B1CRNvuW4V0bE=\");\n\n_c = SimpleForm;\nexport default SimpleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleForm\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/04_00_hooks/UseEfecct.js"],"names":["React","useEffect","useState","Message","SimpleForm","formState","setFormState","name","email","console","log","handleInputChange","target","value"],"mappings":";;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC;AACvCK,IAAAA,IAAI,EAAE,EADiC;AAC5B;AACXC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAA1C,CAHqB,CAQrB;AACA;;AACA,QAAM;AAAED,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBH,SAAxB,CAVqB,CAYrB;AACA;;AACAJ,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACH,GAHQ,EAGN,EAHM,CAAT,CAdqB,CAoBrB;;AACAA,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,GAFQ,EAEN,CAACL,SAAD,CAFM,CAAT;AAKAJ,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT,CA1BqB,CA+BrB;AACA;AACA;AACA;;AACA,QAAMG,iBAAiB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACtCN,IAAAA,YAAY,CAAC,EACT,GAAGD,SADM;AAET,OAAEO,MAAM,CAACL,IAAT,GAAiBK,MAAM,CAACC;AAFf,KAAD,CAAZ;AAIH,GALD;;AAQA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAWI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACO,QAAA,IAAI,EAAC,MADZ;AAEO,QAAA,SAAS,EAAC,cAFjB;AAGO,QAAA,WAAW,EAAC,WAHnB;AAIO,QAAA,YAAY,EAAC,KAJpB;AAKO,QAAA,KAAK,EAAIN,IALhB;AAMO,QAAA,QAAQ,EAAGI;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAXJ,eAqBI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACO,QAAA,IAAI,EAAC,OADZ;AAEO,QAAA,SAAS,EAAC,cAFjB;AAGO,QAAA,WAAW,EAAC,iBAHnB;AAIO,QAAA,YAAY,EAAC,KAJpB;AAKO,QAAA,KAAK,EAAIH,KALhB;AAMO,QAAA,QAAQ,EAAGG;AANlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YArBJ,EAoCMJ,IAAI,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YApCd;AAAA,kBADJ;AA8CH,CAzFD;;GAAMH,U;;KAAAA,U;AA0FN,eAAeA,UAAf","sourcesContent":["\n// useEffect:\n// después de useState es el más usado\n\n// es muy útil cuando se quiere disparar efectos secundarios,\n// es decir, algo cambió o se modificó, dispara esta función\n// el componente se cargó por primera vez, dispara esta función\n// etc\n\n// es un hook que permite ejecutar un efecto secundario cuando algo suceda en nuestros componentes\n\n// ejemplo con  !!!  Simple Form  !!!\n// https://bluuweb.github.io/react/formularios/#form\n\n\nimport React, {useEffect, useState} from \"react\";\nimport Message from \"./UseEffectMessage\";\n\nconst SimpleForm = () => {\n\n    // formState: pequeño formulario\n    const [formState, setFormState] = useState({\n        name: '',  // objeto vacío,   es el name que aparece en en input, más abajo\n        email: ''\n    });\n\n    // desestructurar:\n    // se estraen las propiedades del objeto:\n    const { name, email } = formState;\n\n    // recibe una funcíón de flecha\n    // tiene dependencias\n    useEffect( () => {\n        // regresa una función:\n        return\n    }, [] );\n\n\n    // dependencia: se le pasa el formState -->  porque queremos escuchar sus cambios\n    useEffect( () => {\n        console.log('formState cambió');\n    }, [formState] );\n\n\n    useEffect( () => {\n        console.log('email cambió');\n    }, [email] );\n\n\n    // target.name --> nombre\n    // target.value --> valor del input (son números)\n    // para que se pueda ver en el input, hay que llamar el setFormState\n    // ({ target })  --> se extrae del evento el target\n    const handleInputChange = ({ target }) => {\n        setFormState({\n            ...formState,\n            [ target.name ]: target.value\n        });\n    }\n\n\n    return (\n        <>\n            <p> useEffect ejemplo de simple form </p>\n            <hr/>\n\n            {/*  clase de boostrap: form-group\n             name=\"name\" y name=\"email\"  -->  está arriba\n             value= { name }  -->  se coge de la desestructuración de arriba\n             onChange={ handleInputChange }  --> arriba está definido\n\n             */}\n\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"name\"\n                       className=\"form-control\"\n                       placeholder=\"Tu nombre\"\n                       autoComplete=\"off\"\n                       value= { name }\n                       onChange={ handleInputChange }\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type=\"text\"\n                       name=\"email\"\n                       className=\"form-control\"\n                       placeholder=\"email@gmail.com\"\n                       autoComplete=\"off\"\n                       value= { email }\n                       onChange={ handleInputChange }\n                />\n            </div>\n\n            {/*  Condicional:\n                 si el name existe --> entonces va a mostrar el Message:\n                 en caso contrario, no se va a mostrar\n              */}\n            { name && <Message /> }\n\n\n            {/*  Otro ejemplo\n                  si name es igual a 123, se mostrará  */}\n            {/*{ (name === '123')  && <Message /> }*/}\n\n        </>\n    );\n};\nexport default SimpleForm;\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}