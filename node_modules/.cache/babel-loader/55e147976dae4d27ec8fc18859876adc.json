{"ast":null,"code":"var _jsxFileName = \"/Volumes/ALOY/Front/6_React/retshe/src/components/05_gifAppBuscador/GifGrid.js\",\n    _s = $RefreshSig$();\n\n// Fetch API\n// obtener las imágenes que queremos\n// Intro a useEffect\n// en este componente: cuando note que hay un nuevo elemento, hace la petición http\n// y traiga las imgs correspondientes a la categoría\n// abrir Postman:\n// get: api.giphy.com/v1/gifs/search\n// key: api_key\n// value: QOHo5pdgc4r9KlBkpjsKmAYTnTBc5WcE\n// click en Send\n// aparece la info\n// búsqueda: aloy\n// límite: 10\nimport React, { useState, useEffect } from \"react\";\nimport GifGridItem from \"./GifGridItem\";\nimport './GifStyle.css';\nimport { getGifs } from \"../../helpers/aaagetGifs\"; // se importa de helpers\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GifGrid = ({\n  category\n}) => {\n  _s();\n\n  // estado inicial: array vacío\n  const [images, setImages] = useState([]); // la función se ejecuta solo una vez\n  // cuando se lanza la petición por primera vez\n  // lanza\n\n  useEffect(() => {\n    // recibe la función que queremos ejecutar\n    // se le pasa la categoría (category)\n    // se colocan .then porque retorna una promesa\n    getGifs(category).then(imgs => setImages(imgs));\n  }, [category]); // deps: [] --> el segundo argumento es un array de dependencias\n  // deps: [category] --> si la categoría cambia, se tendría que volver a ejecutar\n  // va a regresar título, imagen, etc\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" \", category, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: images.map(img => /*#__PURE__*/_jsxDEV(GifGridItem, { ...img\n      }, img.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GifGrid, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n\n_c = GifGrid;\nexport default GifGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifGrid\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/components/05_gifAppBuscador/GifGrid.js"],"names":["React","useState","useEffect","GifGridItem","getGifs","GifGrid","category","images","setImages","then","imgs","map","img","id"],"mappings":";;;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP;AACA,SAAQC,OAAR,QAAsB,0BAAtB,C,CAAkD;;;;;AAElD,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE9B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CAH8B,CAK9B;AACA;AACA;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA;AACAE,IAAAA,OAAO,CAAEE,QAAF,CAAP,CACKG,IADL,CACWC,IAAI,IAAIF,SAAS,CAAEE,IAAF,CAD5B;AAEH,GANQ,EAMN,CAAEJ,QAAF,CANM,CAAT,CAR8B,CAe9B;AACA;AAIA;;AACA,sBACI;AAAA,4BAEI;AAAA,sBAAOA,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAYQC,MAAM,CAACI,GAAP,CAAYC,GAAG,iBACX,QAAC,WAAD,OAESA;AAFT,SACUA,GAAG,CAACC,EADd;AAAA;AAAA;AAAA;AAAA,cADJ;AAZR;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AA4BH,CAjDD;;GAAMR,O;;KAAAA,O;AAkDN,eAAeA,OAAf","sourcesContent":["\n// Fetch API\n// obtener las imágenes que queremos\n\n// Intro a useEffect\n\n// en este componente: cuando note que hay un nuevo elemento, hace la petición http\n// y traiga las imgs correspondientes a la categoría\n\n// abrir Postman:\n// get: api.giphy.com/v1/gifs/search\n// key: api_key\n// value: QOHo5pdgc4r9KlBkpjsKmAYTnTBc5WcE\n// click en Send\n// aparece la info\n\n// búsqueda: aloy\n// límite: 10\n\nimport React, {useState, useEffect} from \"react\";\nimport GifGridItem from \"./GifGridItem\";\nimport './GifStyle.css'\nimport {getGifs} from \"../../helpers/aaagetGifs\"; // se importa de helpers\n\nconst GifGrid = ({ category }) => {\n\n    // estado inicial: array vacío\n    const [images, setImages] = useState([]);\n\n    // la función se ejecuta solo una vez\n    // cuando se lanza la petición por primera vez\n    // lanza\n    useEffect( () => {\n        // recibe la función que queremos ejecutar\n        // se le pasa la categoría (category)\n        // se colocan .then porque retorna una promesa\n        getGifs( category )\n            .then( imgs => setImages( imgs ) );\n    }, [ category ] )\n    // deps: [] --> el segundo argumento es un array de dependencias\n    // deps: [category] --> si la categoría cambia, se tendría que volver a ejecutar\n\n\n\n    // va a regresar título, imagen, etc\n    return (\n        <>\n            {/* se imprime la categoría */}\n            <h3> { category } </h3>\n\n            <div className=\"card-grid\">\n\n\n\n                {/*  título:  */}\n                {/*{*/}\n                {/*    images.map(({ id, title }) => (*/}\n                {/*        <li key={ id }> { title } </li>*/}\n                {/*    ) )*/}\n                {/*}*/}\n\n                {\n                    images.map( img => (\n                        <GifGridItem\n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n\n            </div>\n        </>\n    )\n}\nexport default GifGrid;\n\n\n"]},"metadata":{},"sourceType":"module"}