{"ast":null,"code":"var _s = $RefreshSig$();\n\n// useFetch - CustomHook (124)\n//   es el componente que va a trabajar con la info de useFetch\n//  los dos hooks se comunican\nimport React, { useEffect, useState } from \"react\"; // ( url ) --> pedimos la url\n\nexport const useFetch = url => {\n  _s();\n\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  }); // cada vez que cambia la url --> se dispara el efecto\n\n  useEffect(() => {\n    // si queremos que aparezca el \"loading\" cada vez que presionamos el botón de \"siguiente quote\"\n    // vuelve a poner el loading en true\n    // regresa un nuevo estado\n    setState({\n      data: null,\n      loading: true,\n      error: null\n    }); // hacemos la petición fetch:\n\n    fetch(url) // regresa una promesa:\n    .then(respuesta => respuesta.json()).then(data => {\n      // cuando tenemos la data, llamamos al set State\n      setState({\n        loading: false,\n        // en false, porque ya se terminó de cargar\n        error: null,\n        data\n      });\n    });\n  }, [url]); // deps: [url] --> le estamos diciendo: ejecútate solo cuando la url cambia\n\n  return state;\n};\n\n_s(useFetch, \"osjKVfSCkC4Qnz9snHCoegiE53M=\");","map":{"version":3,"sources":["/Volumes/ALOY/Front/6_React/retshe/src/hooks/useFetch.js"],"names":["React","useEffect","useState","useFetch","url","state","setState","data","loading","error","fetch","then","respuesta","json"],"mappings":";;AACA;AAEA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAKC,GAAF,IAAW;AAAA;;AAE/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAC/BK,IAAAA,IAAI,EAAE,IADyB;AAE/BC,IAAAA,OAAO,EAAE,IAFsB;AAG/BC,IAAAA,KAAK,EAAE;AAHwB,GAAD,CAAlC,CAF+B,CAQ/B;;AACAR,EAAAA,SAAS,CAAE,MAAK;AAEZ;AACA;AACA;AACAK,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,IAAvB;AAA6BC,MAAAA,KAAK,EAAE;AAApC,KAAF,CAAR,CALY,CAOZ;;AACAC,IAAAA,KAAK,CAAEN,GAAF,CAAL,CACI;AADJ,KAEKO,IAFL,CAEWC,SAAS,IAAIA,SAAS,CAACC,IAAV,EAFxB,EAGKF,IAHL,CAGWJ,IAAI,IAAI;AAEX;AACAD,MAAAA,QAAQ,CAAC;AACLE,QAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,QAAAA,KAAK,EAAE,IAFF;AAGLF,QAAAA;AAHK,OAAD,CAAR;AAKH,KAXL;AAYH,GApBQ,EAoBN,CAACH,GAAD,CApBM,CAAT,CAT+B,CA+B/B;;AAEA,SAAOC,KAAP;AACH,CAlCM;;GAAMF,Q","sourcesContent":["\n// useFetch - CustomHook (124)\n\n//   es el componente que va a trabajar con la info de useFetch\n//  los dos hooks se comunican\n\nimport React, {useEffect, useState} from \"react\";\n\n// ( url ) --> pedimos la url\nexport const useFetch = ( url ) => {\n\n    const [state, setState] = useState({\n        data: null,\n        loading: true,\n        error: null\n    });\n\n    // cada vez que cambia la url --> se dispara el efecto\n    useEffect( () =>{\n\n        // si queremos que aparezca el \"loading\" cada vez que presionamos el botón de \"siguiente quote\"\n        // vuelve a poner el loading en true\n        // regresa un nuevo estado\n        setState( { data: null, loading: true, error: null } )\n\n        // hacemos la petición fetch:\n        fetch( url )\n            // regresa una promesa:\n            .then( respuesta => respuesta.json() )\n            .then( data => {\n\n                // cuando tenemos la data, llamamos al set State\n                setState({\n                    loading: false, // en false, porque ya se terminó de cargar\n                    error: null,\n                    data\n                })\n            });\n    }, [url])\n\n    // deps: [url] --> le estamos diciendo: ejecútate solo cuando la url cambia\n\n    return state;\n}\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}